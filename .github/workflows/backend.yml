name: Todo Backend

on: [push, workflow_dispatch]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: todo-backend

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - run: make dependencies
        working-directory: todo-backend
      - run: make test
        working-directory: todo-backend

  database-migrations:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    needs:
      - test
      - lint
    steps:
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update &&
          sudo apt-get install --yes postgresql-client
      - uses: actions/checkout@v2
      - name: Configure AWS cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Allow connection from GH Actions to RDS
        run: |
          IP_ADDR=$(curl icanhazip.com)
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 5432 --cidr ${IP_ADDR}/32
      - name: Run database migrations
        run: for i in ./db-init/*; do echo "Executing script $i..."; bash $i; done
        working-directory: todo-backend
        env:
          POSTGRES_ADDRESS: ${{ secrets.POSTGRES_ADDRESS }}
          POSTGRES_USER: ${{ secrets.POSTGRES_ADMIN_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
          POSTGRES_APP_PASSWORD: ${{ secrets.POSTGRES_APP_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DATABASE }}
      - name: Revoke connection from GH Actions to RDS
        run: |
          IP_ADDR=$(curl icanhazip.com)
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 5432 --cidr ${IP_ADDR}/32
        if:  always()

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    needs:
      - database-migrations
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: actions/setup-go@v2
      - name: Build
        working-directory: todo-backend
        run: make dist
      - name: Copy private key
        working-directory: todo-backend
        run: |
          printf ${{ secrets.BASE64_SSH_PRIVATE_KEY }} | base64 -d > private_key && \
          chmod 0600 private_key
      - name: Write .env file
        working-directory: todo-backend
        run: envsubst < .env.template > dist/todo.env
      - name: Deploy updated files to EC2 instances
        working-directory: todo-backend
        run: |
          for i in ${{ secrets.EC2_INSTANCE_IPS }}; do
            echo "Starting deploy to $i...";
            echo "  Stopping service if running...";
            ssh -i ./private_key -o StrictHostKeyChecking=no ${{ secrets.EC2_INSTANCE_USER }}@$i 'sudo systemctl is-active --quiet todo && sudo systemctl stop todo || exit 0';
            echo "  Copying files to instance...";
            scp -ri ./private_key dist ${{ secrets.EC2_INSTANCE_USER }}@$i:~/todo;
            echo "  Moving files into place on instance...";
            ssh -i ./private_key ${{ secrets.EC2_INSTANCE_USER }}@$i '
              sudo rm -rf /opt/todo &&
              sudo mv ~/todo /opt/todo &&
              sudo ln -sfn /opt/todo/todo /usr/local/bin/todo &&
              sudo ln -sfn /opt/todo/todo.service /etc/systemd/system/todo.service &&
              sudo systemctl daemon-reload';
          done
      - name: Restart service
        working-directory: todo-backend
        run: |
          for i in ${{ secrets.EC2_INSTANCE_IPS }}; do
            echo "Starting service on $i...";
            ssh -i ./private_key ${{ secrets.EC2_INSTANCE_USER }}@$i 'sudo systemctl is-enabled --quiet todo || sudo systemctl enable todo';
            ssh -i ./private_key ${{ secrets.EC2_INSTANCE_USER }}@$i 'sudo systemctl start todo';
            ssh -i ./private_key ${{ secrets.EC2_INSTANCE_USER }}@$i 'sudo systemctl is-active --quiet todo';
          done

